#!/usr/bin/perl -w
#
#  irctest
#  Sample Net::IRC script that starts a vapid little annoybot.
#

use Net::IRC;

#
#  Create the IRC and Connection objects
#

$irc = new Net::IRC;

print "Creating connection to IRC server...\n";

$conn = $irc->newconn(Server   => 'irc.cs.cmu.edu',
                      Port     => '6668',
                      Nick     => 'Boolahman',
                      Ircname  => 'This bot brought to you by Net::IRC.',
                      Username => 'quetzalcouatl')
    or die "irctest: Can't connect to IRC server.\n";

#
#  Here's some stuff to print at odd moments.
#

my @zippy = (
  "I am a traffic light, and Alan Ginsberg kidnapped my laundry in 1927!",
  "I'm a GENIUS!  I want to dispute sentence structure with SUSAN SONTAG!!",
  "Now I'm telling MISS PIGGY about MONEY MARKET FUNDS!",
  "I have a VISION!  It's a RANCID double-FISHWICH on an ENRICHED BUN!!",
  "My pants just went on a wild rampage through a Long Island Bowling Alley!!",
  "I always liked FLAG DAY!!",
  "I will establish the first SHOPPING MALL in NUTLEY, New Jersey...",
  "I used to be STUPID, too..before I started watching UHF-TV!!",
  "I smell like a wet reducing clinic on Columbus Day!",
  "Just walk along and try NOT to think about your INTESTINES being almost FORTY YARDS LONG!!",
  "It's the RINSE CYCLE!!  They've ALL IGNORED the RINSE CYCLE!!",
  "Yow!  It's some people inside the wall!  This is better than mopping!",
  "Is the EIGHTIES when they had ART DECO and GERALD McBOING-BOING lunch boxes??",
  "This PIZZA symbolizes my COMPLETE EMOTIONAL RECOVERY!!",
  "I call it a \"SARDINE ON WHEAT\"!",
  "Is it FUN to be a MIDGET?",
  "Someone in DAYTON, Ohio is selling USED CARPETS to a SERBO-CROATIAN!!",
	     );

#
#  Here are the handler subroutines. Fascinating, huh?
#

# What to do when the bot successfully connects.
sub on_connect {
	my $self = shift;
	
	$self->ctcp("ping", "fimmtiu");
	$self->print("Joining #IRC.pm...");
	$self->join("#IRC.pm");
	$self->privmsg("#IRC.pm", &pickrandom(@zippy));
}

# What to do when someone leaves a channel the bot is on.
sub on_part {
    my ($self, $event) = @_;
    my ($channel) = ($event->to)[0];

    printf "*** %s has left channel %s\n",
    	$event->nick, $channel;
}

# What to do when someone joins a channel the bot is on.
sub on_join {
    my ($self, $event) = @_;
    my ($channel) = ($event->to)[0];

    printf "*** %s (%s) has joined channel %s\n",
    $event->nick, $event->userhost, $channel;

    if ($event->userhost =~ /fimmtiu\@.*execpc\.com/) {  # Auto-ops anyone who
	$self->mode("#IRC.pm", "+o", $event->nick);      # matches hostmask.
    }
}

# What to do when we receive a private PRIVMSG.
sub on_msg {
    my ($self, $event) = @_;
    my ($nick) = $event->nick;
    my ($arg) = $event->args;

    $self->print("*$nick*  $arg");
    $self->privmsg($nick, &pickrandom(@zippy));   # Say a Zippy quote.
}

# What to do when we receive channel text.
sub on_public {
    my ($self, $event) = @_;
    my ($to) = $event->to;
    my ($nick, $mynick) = ($event->nick, $self->nick);
    my ($arg) = $event->args;

    $self->print("<$nick:$to>  $arg");
    if ($arg =~ /$mynick/i) {                   # Say a Zippy quote if our nick
	$self->privmsg($to, &pickrandom(@zippy)); # appears in the message.
    }

    if ($arg =~/Go away/i) {       # Tell him to leave, and he does.
	$self->quit("Yow!!");
	exit 0;
    }
}

# What to do when we receive a message via DCC CHAT.
sub on_chat {
    my ($self, $event) = @_;
    my ($nick) = $event->nick;
    my ($sock) = $event->to;
    my ($arg)  = $event->args;

    $self->print("*$nick*  $arg");
    $self->privmsg($sock, &pickrandom(@zippy));   # Say a Zippy quote.
}

# Prints the names of people in a channel when we enter.
sub on_names {
    my ($self, $event) = @_;
    my (@list, $channel) = ($event->args);
    ($channel, @list) = splice @list, 2;

    $list[0] = substr($list[0], 1);
    print "Users on $channel: @list\n";
}

# What to do when we receive a DCC SEND or CHAT request.
sub on_dcc {
    my ($self, $event) = @_;
    my $type = ($event->args)[1];

    if (uc($type) eq 'SEND') {
	$self->new_get($event);
    } elsif(uc($type) eq 'CHAT') {
	$self->new_chat($event);
    } else {
	$self->printerr("Unknown DCC type: " . $type);
    }
}

# Yells about incoming CTCP PINGs.
sub on_ping {
    my ($self, $event) = @_;
    my ($args, $nick) = (($event->args)[0], $event->nick);

    $self->ctcp_reply($nick, $args);
    $self->print("*** CTCP PING request from $nick received");
}

# Gives lag results for outgoing PINGs.
sub on_ping_reply {
    my ($self, $event) = @_;
    my ($args) = ($event->args)[1];
    my ($nick) = $event->nick;

    $args = time - $args;
    $self->print("*** CTCP PING reply from $nick: $args sec.");
}

# Change our nick if someone stole it.
sub on_nick_taken {
    my ($self) = shift;

    $self->nick(substr($self->nick, -1) . substr($self->nick, 0, 8));
}

sub pickrandom {   # Choose a random quote from the @zippy array.
    my $index;

    $index = rand @_;
    return $_[$index];
}


print "Installing handler routines...";

$conn->add_handler('cping',  \&on_ping);
$conn->add_handler('crping', \&on_ping_reply);
$conn->add_handler('msg',    \&on_msg);
$conn->add_handler('chat',   \&on_chat);
$conn->add_handler('public', \&on_public);
$conn->add_handler('join',   \&on_join);
$conn->add_handler('part',   \&on_part);
$conn->add_handler('cdcc',   \&on_dcc);

$conn->add_global_handler(376, \&on_connect);
$conn->add_global_handler(433, \&on_nick_taken);
$conn->add_global_handler(353, \&on_names);

print " done.\n";

print "starting...\n";
$irc->start;
